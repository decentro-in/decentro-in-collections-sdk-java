/*
 * decentro-in-collections
 * Collections
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@decentro.tech
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

package tech.decentro.in.collections.client.api;

import tech.decentro.in.collections.client.ApiException;
import tech.decentro.in.collections.client.ApiResponse;
import tech.decentro.in.collections.client.ApiClient;
import tech.decentro.in.collections.client.Configuration;
import tech.decentro.in.collections.client.model.GeneratePaymentLinkResponse;
import tech.decentro.in.collections.client.model.GetTransactionStatusResponse;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;

import java.util.Date;

/**
 * API tests for CollectionsApi
 */
public class CollectionsApiCustomTest {

    private static CollectionsApi api;

    private static String accountNumber;
    private static String payerUpi;
    private static String clientId;
    private static String clientSecret;
    private static String moduleSecret;
    private static String providerSecret;

    private static String purposeMessage = "Testing Java SDK - Konfig";

    @BeforeAll
    public static void beforeClass() {
        ApiClient client = Configuration.getDefaultApiClient();
        clientId = System.getenv("DECENTRO_CLIENT_ID");
        clientSecret = System.getenv("DECENTRO_CLIENT_SECRET");
        moduleSecret = System.getenv("DECENTRO_COLLECTIONS_MODULE_SECRET");
        providerSecret = System.getenv("DECENTRO_COLLECTIONS_PROVIDER_SECRET");
        client.setClientId(clientId);
        client.setClientSecret(clientSecret);
        client.setModuleSecret(moduleSecret);
        client.setProviderSecret(providerSecret);
        accountNumber = System.getenv("DECENTRO_COLLECTIONS_TEST_ACCOUNT_NUMBER");
        payerUpi = System.getenv("DECENTRO_COLLECTIONS_TEST_PAYER_UPI");
        api = new CollectionsApi(client);
    }

    public String referenceId() {
        return new Date().getTime() + "";
    }

    /**
     * Test out every combination of a missing api key and ensure that instantiating
     * CollectionsApi throws an IllegalArgumentException
     */
    @Test
    public void ensureAllApiKeysAreSet() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        String clientId = System.getenv("DECENTRO_CLIENT_ID");
        String clientSecret = System.getenv("DECENTRO_CLIENT_SECRET");
        String moduleSecret = System.getenv("DECENTRO_COLLECTIONS_MODULE_SECRET");
        String providerSecret = System.getenv("DECENTRO_COLLECTIONS_PROVIDER_SECRET");

        // Test with no api keys set
        apiClient.setClientId(null);
        apiClient.setClientSecret(null);
        apiClient.setModuleSecret(null);
        apiClient.setProviderSecret(null);
        assertThrows(IllegalArgumentException.class, () -> new CollectionsApi(apiClient));

        // Test with client id missing
        apiClient.setClientId(null);
        apiClient.setClientSecret(clientSecret);
        apiClient.setModuleSecret(moduleSecret);
        apiClient.setProviderSecret(providerSecret);
        assertThrows(IllegalArgumentException.class, () -> new CollectionsApi(apiClient));

        // Test with client secret missing
        apiClient.setClientId(clientId);
        apiClient.setClientSecret(null);
        apiClient.setModuleSecret(moduleSecret);
        apiClient.setProviderSecret(providerSecret);
        assertThrows(IllegalArgumentException.class, () -> new CollectionsApi(apiClient));

        // Test with module secret missing
        apiClient.setClientId(clientId);
        apiClient.setClientSecret(clientSecret);
        apiClient.setModuleSecret(null);
        apiClient.setProviderSecret(providerSecret);
        assertThrows(IllegalArgumentException.class, () -> new CollectionsApi(apiClient));

        // Test with provider secret missing
        apiClient.setClientId(clientId);
        apiClient.setClientSecret(clientSecret);
        apiClient.setModuleSecret(moduleSecret);
        apiClient.setProviderSecret(null);
        assertThrows(IllegalArgumentException.class, () -> new CollectionsApi(apiClient));
    }

    /**
     *
     * @throws ApiException
     */
    @Test
    public void stripTrailingSlashTest() throws ApiException {
        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath("https://staging.decentro.tech/");
        // assert base path is stripped
        assertEquals(apiClient.getBasePath(), "https://staging.decentro.tech");
    }

    /**
     * Generate payment link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePaymentLinkTest() throws ApiException {
        ApiClient client = new ApiClient();
        client.setClientId(clientId);
        client.setClientSecret(clientSecret);
        client.setModuleSecret(moduleSecret);
        client.setProviderSecret(providerSecret);
        client.setBasePath("https://in.staging.decentro.tech/sim");
        api = new CollectionsApi(client);
        GeneratePaymentLinkResponse response = api
                .generatePaymentLink("123456789014", accountNumber, 10, purposeMessage, 1)
                .expiryTime(10)
                .execute();
        assertNotNull(response);
        assertTrue(response.toJson().contains("="));
    }

    /**
     * ensure round trip time exists on executeWithHttpInfo()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePaymentLinkExecuteWithHttpInfoTest() throws ApiException {
        ApiClient client = new ApiClient();
        client.setClientId(clientId);
        client.setClientSecret(clientSecret);
        client.setModuleSecret(moduleSecret);
        client.setProviderSecret(providerSecret);
        client.setBasePath("https://in.staging.decentro.tech/sim");
        api = new CollectionsApi(client);
        ApiResponse<GeneratePaymentLinkResponse> response = api
                .generatePaymentLink("123456789014", accountNumber, 10, purposeMessage, 1)
                .expiryTime(10)
                .executeWithHttpInfo();
        assertNotNull(response.getResponseBody());
        assertNotNull(response.getRoundTripTime());
    }

    /**
     * Generate payment link validates against non-0 or non-1 generateQr value
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePaymentLinkValidateGenerateQrTest() throws ApiException {
        ApiClient client = new ApiClient();
        client.setClientId(clientId);
        client.setClientSecret(clientSecret);
        client.setModuleSecret(moduleSecret);
        client.setProviderSecret(providerSecret);
        client.setBasePath("https://in.staging.decentro.tech/sim");
        api = new CollectionsApi(client);
        assertThrows(IllegalArgumentException.class,
                () -> api.generatePaymentLink("123456789014", accountNumber, 10, purposeMessage, 6)
                        .expiryTime(10)
                        .execute());
        assertThrows(IllegalArgumentException.class,
                () -> api.generatePaymentLink("123456789014", accountNumber, 10, purposeMessage, -1)
                        .expiryTime(10)
                        .execute());
    }

    /**
     * Generate payment link validates against empty reference ID string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePaymentLinkValidateReferenceIdTimeTest() throws ApiException {
        ApiClient client = new ApiClient();
        client.setClientId(clientId);
        client.setClientSecret(clientSecret);
        client.setModuleSecret(moduleSecret);
        client.setProviderSecret(providerSecret);
        client.setBasePath("https://in.staging.decentro.tech/sim");
        api = new CollectionsApi(client);
        assertThrows(IllegalArgumentException.class,
                () -> api.generatePaymentLink("", accountNumber, 10, purposeMessage, 1)
                        .expiryTime(10)
                        .execute());
        assertThrows(IllegalArgumentException.class,
                () -> api.generatePaymentLink(" ", accountNumber, 10, purposeMessage, 1)
                        .expiryTime(10)
                        .execute());
    }

    /**
     * Generate payment link validates against negative expiry tiem values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePaymentLinkValidateExpiryTimeTest() throws ApiException {
        ApiClient client = new ApiClient();
        client.setClientId(clientId);
        client.setClientSecret(clientSecret);
        client.setModuleSecret(moduleSecret);
        client.setProviderSecret(providerSecret);
        client.setBasePath("https://in.staging.decentro.tech/sim");
        api = new CollectionsApi(client);
        assertThrows(IllegalArgumentException.class,
                () -> api.generatePaymentLink("123456789014", accountNumber, 10, purposeMessage, 1)
                        .expiryTime(-1)
                        .execute());
    }

    /**
     * Generate payment link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionStatusThrowsOnEmptyStringTest() throws ApiException {
        assertThrows(IllegalArgumentException.class, () -> api.getTransactionStatus("").execute());
    }

    /**
     * Generate payment link
     *
     * @throws ApiException if the Api call fails
     */
    @Disabled
    @Test
    public void getTransactionStatusTest() throws ApiException {
        String transactionId = null;
        GetTransactionStatusResponse response = api.getTransactionStatus(referenceId())
                .execute();
    }
}
